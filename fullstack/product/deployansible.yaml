---
- name: deploy the hpdc lab
  hosts: localhost
  tasks:

  - name: Key pair for ecomm
    ec2_key:
      region: "us-east-1"
      name: ecommkey
    register: ecommkeyout

  - name: Copy pem file and permissions
    copy:
      content: "{{ecommkeyout.key.private_key}}"
      dest: ecomm.pem
      mode: 0400
    when: ecommkeyout is changed

  - name: launch an amiinstance
    cloudformation:
      stack_name: "amiinstance"
      state: "present"
      region: "us-east-1"
      disable_rollback: true
      template: "amiinstance.yaml"
      template_parameters:
         VPCID: "{{vpcid}}"
         SubnetId: "{{publicsn1}}"
    register: amiinstanceout

  - name: launch a loadblancer
    cloudformation:
      stack_name: "loadbalancer"
      state: "present"
      region: "us-east-1"
      disable_rollback: true
      template: "loadbalancer.yaml"
      template_parameters:
         VPCID: "{{vpcid}}"
         PublicSubnet1ID: "{{publicsn1}}"
         PublicSubnet2ID: "{{publicsn2}}"
    register: loadbalancer

  - name: launch a dynamodb table
    cloudformation:
      stack_name: "dynamodb"
      state: "present"
      region: "us-east-1"
      disable_rollback: true
      template: "dynamodb.yaml"
    register: dynamodbout

  - name: add the hosts to target group
    add_host: 
      name: '{{amiinstanceout.stack_outputs.EC2PublicIp}}'
      ansible_user: ec2-user
      ansible_ssh_private_key_file: ecomm.pem
      ansible_become: yes
      ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
      targetgroup: '{{loadbalancer.stack_outputs.ApplicationLoadBalancerTargetGroup}}'

  - name: Wait 300 seconds for port 22 to become open and contain "OpenSSH"
    wait_for:
      port: 22
      host: '{{amiinstanceout.stack_outputs.EC2PublicIp}}'
      search_regex: OpenSSH
      delay: 10
    vars:
      ansible_connection: local

  - copy:
     src: userdata.sh
     dest: /userdata.sh
     mode: 0755
    delegate_to: '{{amiinstanceout.stack_outputs.EC2PublicIp}}'

  - shell: |
      cd /
      sh -x /userdata.sh
      sleep 240
    delegate_to: '{{amiinstanceout.stack_outputs.EC2PublicIp}}'

  - set_fact:
      instanceid: '{{amiinstanceout.stack_outputs.EC2InstanceId}}'
      instancesg: '{{loadbalancer.stack_outputs.InstanceSecurityGroup}}'
      lbdns: '{{loadbalancer.stack_outputs.LoadBalancerDNS}}'
      targetgroup: '{{loadbalancer.stack_outputs.ApplicationLoadBalancerTargetGroup}}'

  - name: Check if AMI exists
    ec2_ami_info:
      region: "us-east-1"
      filters:
        name: "ecomm-ami-1.0"
    register: amifind

  - set_fact:
      amiid: "{{amifind.images[0].image_id}}"
    when: amifind.images

  - debug:
      var: amifind

  - name: Stop EC2 instance for AMI creation
    ec2_ami:
      region: "us-east-1"
      instance_ids: 
        - '{{amiinstanceout.stack_outputs.EC2InstanceId}}'
      state: stopped
      wait: yes
    when: not amifind.images

  - name: AMI Creation
    ec2_ami:
      instance_id: '{{amiinstanceout.stack_outputs.EC2InstanceId}}'
      name: "ecomm-ami-1.0"
      region: "us-east-1"
      wait: yes
      tags:
        Name: "ecomm-ami-1.0"
      state: present
    register: amiout
    when: not amifind.images

  - set_fact:
      amiid: "{{amiout.image_id}}"
    when: amiout.image_id

  - debug:
      var: amiout

  - name: Deploy Autoscaling and ALb
    cloudformation:
      stack_name: "autoscaling"
      state: "present"
      region: "us-east-1"
      disable_rollback: true
      template: "autoscaling.yaml"
      template_parameters:
        VPCID: "{{vpcid}}"
        PrivateSubnet1ID: "{{privatesn1}}"
        PrivateSubnet2ID: "{{privatesn2}}"
        KeyName: ecommkey
        Ami: "{{amiid}}"
        targetgroup: "{{targetgroup}}"
        instancesg: '{{amiinstanceout.stack_outputs.SecurityGroupId}}'
         
